Django REST Framework:
---------------------------------------------------------------------------------------------------------------------

Keep the context in mind:

You want to access data from a server and integrate it into some other application

What is DRF?

    Definition:
        DRF is a powerful and flexible toolkit for building Web APIs in Django.

    Why use DRF?

        Simplifies API development.
        Built-in support for serialization, authentication, and view handling.
        Fully compatible with Django models and views.
        Helps expose database models as JSON-based APIs.

Let's understand API:

    Application Programming Interface -> API (Application Programming Interface) 
    is a set of rules and protocols that allows different software applications to communicate with each other.

    An API lets one program or system talk to another — like a menu in a restaurant. 
    You (the client) order something, and the kitchen (the server) gives it to you. 
    You don’t need to know how the food is cooked, just what’s on the menu and how to ask for it.

How API is used in Web-Development:

    A Web API allows communication over the internet.
    It usually sends and receives data in JSON format.
    Common methods: GET, POST, PUT, DELETE -> CRUD opertations over the network on specific data models

DJANGO REST FRAMEWORK:


    Component               | Purpose
    ------------------------------------------------------------------
    Model                   | Represents your database table.
    Serializer              | Converts models ↔ JSON data.
    View/ViewSet            | Handles logic for API endpoints.
    Router                  | Auto-generates URLs for ViewSets.
    URLConf                 | Connects API to the Django project.

Example:

    Related to Consumables:

    Steps to build an API for a model (e.g., Consumables):

        Define a model (e.g., name, category, quantity).
        Create a serializer using ModelSerializer.
        Use ModelViewSet to expose the model.
        Register the viewset with a router.
        Include the router in your Django urls.py.

        Actions:

        GET     /api/consumables/
        POST    /api/consumables/
        PUT     /api/consumables/1/
        DELETE  /api/consumables/1/

        Once the server is setup, you can perform all the actions 

        Via: POSTMAN (application), requests(Python Library) or any library that supports HTTP calls (Python/Java/JS etc)
             also on browsers


    Details:

    You manage an inventory of consumable items (e.g., pens, paper, cartridges, etc.) used in an office. Each item has:

            id (auto)
            name (str)
            category (str, like "stationery", "cleaning", etc.)
            quantity (int)
            last_updated (datetime)

Setting up the project:
-----------------------------------------------------------------------------------------------

pip install djangorestframework

Step 1:
----------------------------
django-admin startproject rest_project
cd rest_project
python manage.py startapp inventory

Step 2:
----------------------------
settings.py ->
INSTALLED_APPS = [
    'inventory',
    ...
]

Step 3:
----------------------------
models.py ->
from django.db import models

# Create your models here.

class Consumable(models.Model):

    name = models.CharField(max_length=100)
    category = models.CharField(max_length=100)
    quantity = models.IntegerField()
    last_updated = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} ({self.category})"

admin.py ->
admin.site.register(Consumable)

python manage.py makemigration
python manage.py migrate

Step 4:
----------------------------

serializers.py ->
from rest_framework import serializers
from .models import Consumable

class ConsumableSerializer(serializers.ModelSerializer):
    class Meta:
        model = Consumable
        fields = '__all__'


Step 5:
------------------------------

views.py ->
from django.shortcuts import render # <- we don't render anything here

from rest_framework import viewsets
from .models import Consumable
from .serializers import ConsumableSerializer

# Create your views here.
class ConsumableViewSet(viewsets.ModelViewSet):

    queryset = Consumable.objects.all()
    serializer_class = ConsumableSerializer

Step 6:
----------------------------

urls.py ->
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import ConsumableViewSet

router = DefaultRouter()
router.register(r'consumables', ConsumableViewSet)

urlpatterns = [
    path('', include(router.urls)),
]

urls.py -> (project level)
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('inventory.urls')),
]