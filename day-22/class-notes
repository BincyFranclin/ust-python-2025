----------------------------------------------------------------------

PROJECT WITH MODELS

----------------------------------------------------------------------



Creating a project
----------------------------------------------------------------------

>django-admin startproject studentportal
>cd studentportal
>python manage.py startapp students

Update settings.py at the project level
----------------------------------------------------------------------

INSTALLED_APPS = [
    'students', ...
]

Creating a model and registering it in admin.py
----------------------------------------------------------------------

models.py -> 
class Student(models.Model):

    name = models.CharField(max_length=100)
    age = models.IntegerField()
    class_name = models.CharField(max_length=20)
    marks = models.FloatField()

    def __str__(self):
        return self.name
    
admin.py ->
from .models import Student

# Register your models here.

admin.site.register(Student)


Create the student template
----------------------------------------------------------------------

..\49-app-django-student\studentportal\students\templates\students\student_form.html ->

<h1>Add Student</h1>
    <form method="post" action="">
        <h3><label>Name    </label><input type="text" name="name"></h3><br>
        <h3><label>Age     </label><input type="number" name="age"></h3><br>
        <h3><label>Class   </label><input type="text" name="class_name"></h3><br>
        <h3><label>Marks    </label><input type="number" name="marks"></h3><br>
        <button type="submit">Submit</button>
    </form>
    <h3><a href="{% url 'student_list' %}">View Students</a></h3>

..\49-app-django-student\studentportal\students\templates\students\student_list.html ->

<h1> Student List</h1>
    <table border="1">
        <tr>
            <th>Name</th><th>Age</th><th>Class</th><th>Marks</th>
        </tr>
        {% for student in students %}
        <tr>
            <td>{{ student.name }}</td>
            <td>{{ student.age }}</td>
            <td>{{ student.class_name }}</td>
            <td>{{ student.marks }}</td>
        </tr>
        {% endfor %}
    </table>
    <h3><a href="{% url 'student_form' %}">Add New Student</a></h3>

Update views, views.py ->
----------------------------------------------------------------------
from django.shortcuts import render, redirect
from .models import Student

# Create your views here.

def student_form(request):
    print(request.POST)   # <- dictionary
    if(request.method == 'POST'):
        # collect the data from the form request
        name = request.POST.get('name', 'Unknown')
        age = request.POST.get('age', 'Unknown')
        class_name = request.POST.get('class_name', 'Unknown')
        marks = request.POST.get('marks', 'Unknown')
        # A row is creted in the model (table)
        Student.objects.create(name=name, age=age, class_name=class_name, marks=marks)
        # redirect to a different view
        return redirect('student_list')  # You can also skip this
    return render(request, 'students/student_form.html')

def student_list(request):
    context = {
        'students': Student.objects.all()
    }
    return render(request, 'students/student_list.html', context)

App level, urls.py ->
----------------------------------------------------------------------

from django.urls import path
from . import views

urlpatterns = [
    path('', views.student_form, name='student_form'),
    path('list', views.student_list, name='student_list')
]

Project level, urls.py ->
----------------------------------------------------------------------

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('students.urls'))
]

Commands ->
----------------------------------------------------------------------

python manage.py makemigrations
python manage.py migrate
python manage.py runserver


----------------------------------------------------------------------

PROJECT WITH AUTHENTICATION

----------------------------------------------------------------------

PROCEDURE:

login.html
-------------------------------------------

<h1>Login</h1>

    {%  if form.errors %}
        <p style="color:red">Invalid user name or password</p>
    {%  endif %}

    <form method="post">

        {% csrf_token %}

        <label for="id_username">User Name: </label> <!-- automatically assigns the ID to the field -->
        {{ form.username }} <br><br> <!-- Renders the input for username -->

        <label for="id_password">Password: </label>
        {{ form.password }} <br><br> <!-- Renders the input for password -->

        <button type="submit">Login</button>

    </form>

view.py -> 
-------------------------------------------

from django.contrib.auth.decorators import login_required

Add @login_required for the views


urls.py -> project level ->
-------------------------------------------

from django.contrib.auth import views as auth_views


urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('students.urls')),
    path('login/', auth_views.LoginView.as_view(template_name = 'students/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page = 'login'), name='logout')
]

settings.py
-------------------------------------------
add
# Login settings

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'


student_form.html and student_list.html
----------------------------------------------------

add
<h3>Logged in as {{ request.user }} | <a href="{% url 'logout' %}">Logout</a></h3>


Creating a super user
----------------------------------------------------
python manage.py createsuperuser


Start the server
----------------------------------------------------
python manage.py runserver

Login with superuser credentials

NOTES:

How does Django know about creating login fields?

You're using LoginView from django.contrib.auth.views.
It automatically uses Django's AuthenticationForm behind the scenes.
It handles all login logic: validating username/password, authenticating user, creating session, etc.
It expects the template (e.g., login.html) to contain a form with the same field names (username, password).
When your template does this:

<form method="post">
  {% csrf_token %}
  {{ form.username }}
  {{ form.password }}
  <button type="submit">Login</button>
</form>

…and it's rendered by Django’s LoginView, then Django knows:

To use AuthenticationForm
To expect username and password
To validate and log the user in

Part                           | Role
LoginView.as_view()            | Handles login logic
AuthenticationForm             | Contains the expected fields
template_name='login.html'     | Renders the form into your custom template
form.username, form.password   | Match what AuthenticationForm provides


Different AuthenticationForm inputs:

{{ form.username }}
{{ form.password }}
{{ form.email }}
{{ form.first_name }}
{{ form.last_name }}


----------------------------------------------------------------------

PROJECT WITH ADMIN

----------------------------------------------------------------------